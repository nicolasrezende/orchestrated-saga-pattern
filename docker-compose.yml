version: '3'

services:

  order-db:
    image: mongo:latest
    container_name: order-db
    restart: always
    networks:
      - orchestrated-saga-pattern
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=123456
    ports:
      - 27017:27017

  order-validation-db:
    image: postgres:latest
    container_name: order-validation-db
    networks:
      - orchestrated-saga-pattern
    environment:
      - POSTGRES_DB=order-validation-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432

  order-register-db:
    image: postgres:latest
    container_name: order-register-db
    networks:
      - orchestrated-saga-pattern
    environment:
      - POSTGRES_DB=order-register-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5433:5432

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    networks:
      - orchestrated-saga-pattern
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    networks:
      - orchestrated-saga-pattern
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  redpanda-console:
    container_name: redpanda
    image: docker.redpanda.com/vectorized/console:latest
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    ports:
      - "8081:8080"
    networks:
      - orchestrated-saga-pattern
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:29092"]
    depends_on:
      - zookeeper
      - kafka

  order-service:
    build: './order-service'
    container_name: order-service
    depends_on:
      - order-db
      - kafka
    networks:
      - orchestrated-saga-pattern
    environment:
      - KAFKA_BROKER=kafka:29092
      - MONGO_DB_URI=mongodb://admin:123456@order-db:27017
    ports:
      - 3000:3000

  orchestrator-service:
    build: './orchestrator-service'
    container_name: orchestrator-service
    depends_on:
      - kafka
    networks:
      - orchestrated-saga-pattern
    environment:
      - KAFKA_BROKER=kafka:29092
    ports:
      - 8080:8080

  order-validation-service:
    build: './order-validation-service'
    container_name: order-validation-service
    depends_on:
      - order-validation-db
      - kafka
    networks:
      - orchestrated-saga-pattern
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=order-validation-db
      - DB_PORT=5432
      - DB_NAME=order-validation-db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    ports:
      - 8090:8090

  order-register-service:
    build: './order-register-service'
    container_name: order-register-service
    depends_on:
      - order-register-db
      - kafka
    networks:
      - orchestrated-saga-pattern
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=order-register-db
      - DB_PORT=5432
      - DB_NAME=order-register-db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    ports:
      - 8091:8091

networks:
  orchestrated-saga-pattern:
    driver: bridge
